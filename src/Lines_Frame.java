import Pharma_Production.DatabaseUtil;
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

public class Lines_Frame extends javax.swing.JFrame {

    private static int empID; 
    public Lines_Frame(int empID) {
        this.empID = empID;
        initComponents();
        populateLinesTable();
        addTableListener();
    }
    
    public static int getManagerID(int lineID) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int managerID = -1; // Default to -1 if not found or error occurs

        try {
            conn = DatabaseUtil.getConnection();
            String sql = "SELECT EmployeeID FROM Employees WHERE ManagerID IS NULL AND LineID = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, lineID);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                managerID = rs.getInt("EmployeeID");
                //System.out.println("Manager ID for Line ID " + lineID + ": " + managerID);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            DatabaseUtil.close(conn, pstmt, rs);
        }

        return managerID;
    }


    private void populateLinesTable() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();
            String sql = "SELECT LabID, LineID, Specialization FROM ProductionLines";
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Lab Id");
            model.addColumn("Line Id");
            model.addColumn("Manager Id");
            model.addColumn("Specialization");
            
            while (rs.next()) {
                Object[] row = new Object[4];
                int lineId = rs.getInt("LineID");
                int managerId = getManagerID(lineId);
                row[0] = rs.getInt("LabID");
                row[1] = lineId;
                row[2] = managerId;
                row[3] = rs.getString("Specialization");
                model.addRow(row);
            }

            tbl_Lines.setModel(model);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from database.");
        } finally {
            DatabaseUtil.close(conn, pstmt, rs);
        }
    }
    
    private void addTableListener() {
        tbl_Lines.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tbl_Lines.getSelectedRow();
                    if (selectedRow != -1) {
                        int lineId = (int) tbl_Lines.getValueAt(selectedRow, 1); // Assuming LineID is in column 1
                        int managerId = getManagerID(lineId);
                        if (managerId != -1) {
                            Manufacturing_Frame manufacturing = new Manufacturing_Frame(lineId, empID);
                            manufacturing.setVisible(true);
                            dispose();
                            
                            // Do something with managerId
                            System.out.println("Manager ID for Line ID " + lineId + ": " + managerId);
                        } else {
                            JOptionPane.showMessageDialog(Lines_Frame.this, "Manager not found for Line ID: " + lineId);
                        }
                    }
                }
            }
        });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_Back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Lines = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_Back.setText("Back");
        btn_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_BackActionPerformed(evt);
            }
        });

        tbl_Lines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Lab Id", "Line Id", "Manager Id", "Specialization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl_Lines);

        jLabel1.setText("Click on the line to go to the manufacturing form.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Back))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btn_Back)
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(232, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_BackActionPerformed
        Dashboard_Frame dashboard = new Dashboard_Frame(empID);
        dashboard.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_BackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lines_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lines_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lines_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lines_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lines_Frame(empID).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl_Lines;
    // End of variables declaration//GEN-END:variables
}
