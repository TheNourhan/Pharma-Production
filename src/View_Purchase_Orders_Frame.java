import Pharma_Production.DeliveredCellEditor;
import Pharma_Production.DatabaseUtil;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import javax.swing.table.TableColumn;

public class View_Purchase_Orders_Frame extends javax.swing.JFrame {

    private DefaultTableModel tableModel;
    
    public View_Purchase_Orders_Frame() {
        initComponents();
        fetchPurchaseOrders();
        initializeTable();
    }
    private void initializeTable() {
        tableModel = (DefaultTableModel) jTable1.getModel();

        // Assuming "Delivered" column index is 5 (adjust if needed)
        TableColumn deliveredColumn = jTable1.getColumnModel().getColumn(6);
        deliveredColumn.setCellEditor(new DeliveredCellEditor());
    }
    private void fetchPurchaseOrders() {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DatabaseUtil.getConnection();

            String sql = "SELECT po.OrderID, po.DistributorID, po.MedicineID, m.TradeName, po.Quantity, po.OrderDate, po.Delivered " +
             "FROM PurchaseOrders po " +
             "INNER JOIN Medicines m ON po.MedicineID = m.MedicineID";


            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();

            while (rs.next()) {
                int orderID = rs.getInt("OrderID");
                int DistributorID = rs.getInt("DistributorID");
                String tradeName = rs.getString("TradeName");
                int quantity = rs.getInt("Quantity");
                Date orderDate = rs.getDate("OrderDate");
                int delivered = rs.getInt("Delivered");
                float price = calculatePrice(rs.getInt("MedicineID"), quantity); // Calculate total price

                // Add row to table model
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{orderID, DistributorID, tradeName, quantity, orderDate, price, delivered == 1});
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            DatabaseUtil.close(conn, pstmt, rs);
        }
    }
    private float calculatePrice(int medicineID, int quantity) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        float price = 0;

        try {
            conn = DatabaseUtil.getConnection();

            String sql = "SELECT Price FROM Medicines WHERE MedicineID = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, medicineID);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                float unitPrice = rs.getFloat("Price");
                price = unitPrice * quantity;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            DatabaseUtil.close(conn, pstmt, rs);
        }

        return price;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "OrderID ", "Distributor ID ", "Medicine TradeName ", "Quantity ", "OrderDate ", "Price", "Delivered "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_Purchase_Orders_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_Purchase_Orders_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_Purchase_Orders_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_Purchase_Orders_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View_Purchase_Orders_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
